MASK64 = 0xffffffffffffffff


def not256(a):
    r = 0
    for i in range(32):
        byte_i = (a >> (i*8)) & 0xFF
        byte_i_cpt = 0xFF - byte_i
        r += byte_i_cpt << (i*8)
    return r

def masking(number):
    s = 0
    for i in range(number):
        s += 1 << i
    return s

def xor256(a, b):
    r = 0
    for i in range(32):
        byte_a_i = (a >> (i*8)) & 0xFF
        byte_b_i = (b >> (i*8)) & 0xFF
        byte_xored = byte_a_i ^ byte_b_i
        r += byte_xored << (i*8)
        #r += ( ((a >> (i*8)) & 0xFF) ^ ((b >> (i*8)) & 0xFF) ) << (i*8)
    return r

def xor64(a, b):
    r = 0
    for i in range(8):
        byte_a_i = (a >> (i*8)) & 0xFF
        byte_b_i = (b >> (i*8)) & 0xFF
        byte_xored = byte_a_i ^ byte_b_i
        r += byte_xored << (i*8)
        #r += ( ((a >> (i*8)) & 0xFF) ^ ((b >> (i*8)) & 0xFF) ) << (i*8)
    return r

#storage["0x00"] = indexes [0, 1, .... 255] 256
#bit-indexed
def get_storage_0x00(idx_start, length):
    global storage
    assert storage["0x0000000000000000000000000000000000000000000000000000000000000000"] < (1 << 256)

    res = 0
    for i in range(length):
        tmp = storage["0x0000000000000000000000000000000000000000000000000000000000000000"] >> (255-(idx_start+i))
        tmp &= 1
        tmp = tmp << (length-1-i)
        res += tmp

    return res


def set_storage_0x00(idx_start, length, value):
    global storage
    assert storage["0x0000000000000000000000000000000000000000000000000000000000000000"] < (1<<256)
    assert (value >> length) == 0

    res = 0
    for i in range(256):
        if (i < idx_start) or (i >= idx_start+length):
            tmp = storage["0x0000000000000000000000000000000000000000000000000000000000000000"] >> (255-i)
            tmp &= 1
            tmp = tmp << (255-i)
        else:
            tmp = value >> (length-1 - (i-idx_start))
            tmp &= 1
            tmp = tmp << (255-i)
        res += tmp
    storage["0x0000000000000000000000000000000000000000000000000000000000000000"] = res


def check_candidate(candidate, b_0):
    val_8bytes = candidate & get_storage_0x00(12*8,64)
    val_8bytes_2 = val_8bytes

    for j in range(1, 0x40, 1):
        val_8bytes_2_new = xor256(val_8bytes_2,(val_8bytes >> j))
        val_8bytes_2 = val_8bytes_2_new        
    
    return (val_8bytes_2 & 1) == b_0


#OK
def rev_func_022F():
    global storage
    for i in range(0x40):

        b = get_storage_0x00(32,64)
        #print("%016x" % b)


        a_1_63 = b & masking(63) #missing a[0], only have a[1:64]
        b_0 = b >> 63

        val_32_95 = a_1_63 << 1 #val_95 unknown

        if check_candidate(val_32_95, b_0):
            right_value = val_32_95
        elif check_candidate(val_32_95+1, b_0):
            right_value = val_32_95+1
        else:
            raise Exception("Error inverting rev_func_022F")
        
        set_storage_0x00(32,64,right_value)

    #print("%064x" % storage["0x00"])
        

storage = dict()


#testing rev_func_022F
storage["0x00"] = 0x000000005c1be94bbef7c16852452052303054214d304420535155e100000000
#rev_func_022F()


def f_alpha_p(a):
    #a must be even
    assert a % 2 == 0 and a != 0
    alpha = a
    p = -1
    while(alpha % 2 == 0):
        alpha = alpha // 2
        p += 1

    assert alpha % 2 == 1
    return alpha, p

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, N):
    #find a_inv such as a * a_inv = 1 [2**N]
    m = 2**N
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception("Modular inverse does not exist")
    else:
        return x % m

def compute_sqrt_N_x(N,x):
    sqrt_list = []
    #for i <= 3, sqrt_i(x) = 1
    for i in range(4):
        sqrt_list.append(1)
    
    #for i >= 4: 
    for n in range(4,N+1,1):
        #sqrt_nm1: sqrt{i-1}(x)
        sqrt_nm1 = sqrt_list[n-1]

        if (sqrt_nm1 ** 2) % (2**n) == x % (2**n):
            sqrt_list.append(sqrt_nm1)
        elif (sqrt_nm1 ** 2) % (2**n) == (2**(n-1) + x) % (2**n):
            sqrt_list.append(2**(n-2) - sqrt_nm1)
        else:
            raise Exception("Error")
    
    return sqrt_list[N]

def solving_modeq(c):
    N = 64
    const_a = 0x854e9fb4699ed8f22fd89ebe3f17f7f6
    const_b = 0xd677105721b51a080288a52f7aa48517
    const_c = (-c) % (2**N)
    assert const_c > 0

    alpha, p = f_alpha_p(const_a)
    assert const_a == alpha * (2**(p+1))
    assert alpha%2 == 1
    
    alpha_inv = modinv(alpha, N+p+3)
    assert (alpha*alpha_inv) % (2**(N+p+3)) == 1

    Delta = (const_b ** 2) - (4 * const_a * const_c)
    #delta = prime_mod_sqrt(Delta, 2, N+p+3)
    #print("%x" % (Delta % 8))
    #print("%x" % (Delta % (2**(N+p+3))))
    assert Delta % 8 == 1
    
    d = compute_sqrt_N_x(N+p+3, Delta)

    delta_candidates = [d, 2**(N-1) + d, 2**(N-1) - d, 0-d]

    for delta in delta_candidates:
        x = ( (-const_b + delta) * alpha_inv // (2**(p+2)) ) % (2**N)
    
        #checking solution:
        tmp1 = const_a * x * x
        tmp2 = const_b * x
        if ((tmp1 + tmp2) & MASK128) == c:
            return x
    
    raise Exception("No solution found")

#WORKING !!
#solving_modeq(0x00000000000000000000000000000000D66E814BB355980F6C0B7F6DBA545ECB)

def rol_1byte(a):
    return ((a << 1) | a >> 7) & 0xFF

def ror_1byte(a):
    return ((a >> 1) | a << 7) & 0xFF

def check_val_1byte(candidate, val_8bytes_candidate, val_8bytes_final):
    val_8bytes = val_8bytes_candidate
    val_1byte = candidate
    for i in range(8):
        tmp = val_1byte
        val_8bytes = xor256(val_8bytes,(tmp << (i * 0x08 & 0xff)))
        val_1byte = rol_1byte(tmp)

    return val_8bytes == val_8bytes_final

MASK128 = 0xffffffffffffffffffffffffffffffff
global message
message = []

from web3 import Web3
def keccak256(val1, val2):
    return "0x" + ("%064X" % Web3.toInt(Web3.soliditySha3(['uint256','uint256'],[val1, val2])))

def rev_func_0105():
    global storage, message
    set_storage_0x00(224,32,get_storage_0x00(224,32)-1)
    keccak_idx = keccak256(get_storage_0x00(224, 32), 1)
    Y = storage[keccak_idx]
    X_64bits = solving_modeq(Y)

    val_8bytes = xor256(X_64bits, get_storage_0x00(4*8,64)) & MASK64
    rev_func_022F()

    val_8bytes_ref = val_8bytes
    
    message = [val_8bytes_ref] + message

#testing rev_func_0105
#storage["0x00"] = 0x0000000024eca6497093794c5245205230305421ee085b2859c4b28800000001

"""
Contract data is 0x60806040523480156100115760006000fd5b506040516106c03803806106c0833981810160405260208110156100355760006000fd5b81019080805190602001909291905050505b6000600060006101000a81548163ffffffff021916908363ffffffff16021790555080674d3044205351554118600060046101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600060049054906101000a900467ffffffffffffffff16600060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506752452052303054216000600c6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b50610113565b61059e806101226000396000f3fe60806040523480156100115760006000fd5b50600436106100825760003560e01c8063b5b6d2a81161005c578063b5b6d2a8146100ee578063d1e8507b14610134578063e1ef28781461019b578063fe9272cc146101cd57610082565b806326987b6014610088578063863b2769146100b2578063a67f8c90146100e457610082565b60006000fd5b6100906101ff565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b6100ba610215565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b6100ec61022f565b005b610132600480360360408110156101055760006000fd5b81019080803567ffffffffffffffff169060200190929190803560ff16906020019092919050505061031b565b005b6101616004803603602081101561014b5760006000fd5b8101908080359060200190929190505050610500565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101a3610534565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b6101d561054e565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b600060009054906101000a900463ffffffff1681565b600060149054906101000a900467ffffffffffffffff1681565b6000600090505b60408110156103175760006000600c9054906101000a900467ffffffffffffffff16600060149054906101000a900467ffffffffffffffff1616905060008190506000600190505b60408110156102a957808367ffffffffffffffff16901c8218915081505b808060010191505061027e565b50603f8167ffffffffffffffff16901b6001600060149054906101000a900467ffffffffffffffff1667ffffffffffffffff16901c17600060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505b8080600101915050610236565b505b565b6020600060009054906101000a900463ffffffff1663ffffffff161015156103435760006000fd5b60008160ff1690506000600090505b60088160ff1610156103ac576008810260ff168267ffffffffffffffff16901b84189350835060078267ffffffffffffffff16901c60fe60018467ffffffffffffffff16901b1617915081505b8080600101915050610352565b506103bb61022f63ffffffff16565b6000600060149054906101000a900467ffffffffffffffff1690508084189350835060006f854e9fb4699ed8f22fd89ebe3f17f7f6905060006fd677105721b51a080288a52f7aa48517905060008667ffffffffffffffff1682028767ffffffffffffffff168867ffffffffffffffff16850202016fffffffffffffffffffffffffffffffff1690506fffffffffffffffffffffffffffffffff811660016000506000600060009054906101000a900463ffffffff1663ffffffff16815260200190815260200160002060006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506000600081819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505050505050505b5050565b600160005060205280600052604060002060009150909054906101000a90046fffffffffffffffffffffffffffffffff1681565b600060049054906101000a900467ffffffffffffffff1681565b6000600c9054906101000a900467ffffffffffffffff168156fea264697066735822122004b21aaa5ce3676e8d742309383f5e711de6f2cc148188fffd716a54d070697964736f6c6343000600003300000000000000000000000000000000000000000000000030e731f369ac474a

0xb5b6d2a80000000000000000000000000000000000000000000000003ed7166450102caa00000000000000000000000000000000000000000000000000000000000000b0
0xb5b6d2a8000000000000000000000000000000000000000000000000decb5998e65cec8400000000000000000000000000000000000000000000000000000000000000bf
0xb5b6d2a800000000000000000000000000000000000000000000000048e28deffe2b9c920000000000000000000000000000000000000000000000000000000000000021
0xb5b6d2a8000000000000000000000000000000000000000000000000edbc34da6e4133e90000000000000000000000000000000000000000000000000000000000000098
0xb5b6d2a8000000000000000000000000000000000000000000000000d7428e698b42a21600000000000000000000000000000000000000000000000000000000000000cc
0xb5b6d2a8000000000000000000000000000000000000000000000000962e19cb47f2a42700000000000000000000000000000000000000000000000000000000000000af
0xb5b6d2a800000000000000000000000000000000000000000000000033effc79aa2c781500000000000000000000000000000000000000000000000000000000000000f7
0xb5b6d2a80000000000000000000000000000000000000000000000002687d221de1ac30f00000000000000000000000000000000000000000000000000000000000000a6
0xb5b6d2a80000000000000000000000000000000000000000000000001afe2f64ae66e4d30000000000000000000000000000000000000000000000000000000000000069
0xb5b6d2a8000000000000000000000000000000000000000000000000a5a7f1caec3790440000000000000000000000000000000000000000000000000000000000000003
0xb5b6d2a8000000000000000000000000000000000000000000000000ce16cd40b0ed0672000000000000000000000000000000000000000000000000000000000000004d
0xb5b6d2a8000000000000000000000000000000000000000000000000cfdd2503032b906200000000000000000000000000000000000000000000000000000000000000a9
0xb5b6d2a8000000000000000000000000000000000000000000000000a22b74c2c3d4d3140000000000000000000000000000000000000000000000000000000000000014
0xb5b6d2a8000000000000000000000000000000000000000000000000b641297b5004fc2300000000000000000000000000000000000000000000000000000000000000f4
0xb5b6d2a80000000000000000000000000000000000000000000000009acbc78458d43c44000000000000000000000000000000000000000000000000000000000000009d
0xb5b6d2a800000000000000000000000000000000000000000000000010c8e7e006dca6fa00000000000000000000000000000000000000000000000000000000000000d5
0xb5b6d2a8000000000000000000000000000000000000000000000000345009f0ef7e0a6c0000000000000000000000000000000000000000000000000000000000000004
0xb5b6d2a80000000000000000000000000000000000000000000000007ba51204981cbf75000000000000000000000000000000000000000000000000000000000000002b
0xb5b6d2a8000000000000000000000000000000000000000000000000f4df992f658f45150000000000000000000000000000000000000000000000000000000000000051
0xb5b6d2a80000000000000000000000000000000000000000000000007acd9dcc14782d870000000000000000000000000000000000000000000000000000000000000041
0xb5b6d2a80000000000000000000000000000000000000000000000001865bce050680c44000000000000000000000000000000000000000000000000000000000000007a
0xb5b6d2a8000000000000000000000000000000000000000000000000fe92325186e738f30000000000000000000000000000000000000000000000000000000000000075
0xb5b6d2a8000000000000000000000000000000000000000000000000de79e8e59a18f90f0000000000000000000000000000000000000000000000000000000000000084
0xb5b6d2a8000000000000000000000000000000000000000000000000fb3be25545c5b86200000000000000000000000000000000000000000000000000000000000000fd
0xb5b6d2a8000000000000000000000000000000000000000000000000e48471b49404ab330000000000000000000000000000000000000000000000000000000000000000
0xb5b6d2a8000000000000000000000000000000000000000000000000a285b20f35749184000000000000000000000000000000000000000000000000000000000000003d
0xb5b6d2a8000000000000000000000000000000000000000000000000deae44d73544c1090000000000000000000000000000000000000000000000000000000000000072
0xb5b6d2a8000000000000000000000000000000000000000000000000be26ce68aba653f200000000000000000000000000000000000000000000000000000000000000b3
0xb5b6d2a80000000000000000000000000000000000000000000000002f737d1a016a31060000000000000000000000000000000000000000000000000000000000000036
0xb5b6d2a8000000000000000000000000000000000000000000000000696093228a7fc36300000000000000000000000000000000000000000000000000000000000000fb
0xb5b6d2a8000000000000000000000000000000000000000000000000bbb0ad96a6839b07000000000000000000000000000000000000000000000000000000000000007f
0xb5b6d2a80000000000000000000000000000000000000000000000001553b3584da166770000000000000000000000000000000000000000000000000000000000000059

Contract memory is now :
Memory slot 755311B9E2CEE471A91B161CCC5DEED933D844B5AF2B885543CC3C04EB640983 = 00000000000000000000000000000000874AED61E22EAA0EFA4CAF4EBB455EFA
Memory slot 68FB8E7CAD479CCC9244A179D64897454189FD25DB04E15D3A5135327A17597B = 0000000000000000000000000000000059A2BC962DFD77D2CB6833553657B0B3
Memory slot A6EEF7E35ABE7026729641147F7915573C7E97B47EFA546F5F6E3230263BCB49 = 000000000000000000000000000000006854E31EAB3F482277DDD43255C997FB
Memory slot 02D9F8353BCA53BC9B195AA186AB6D98B49A9120C00257EE2C7D860C26F864EA = 000000000000000000000000000000006B5B8A40D65B2B45BBB23240EE8AC472
Memory slot 74A5FBCB419AB7DBACBB2C92A4E163730F0DA5C72B911DEECF4F05A6B327D0A4 = 00000000000000000000000000000000CC62F74CBB72DF2D5572F36452D4E8AF
Memory slot 86B3FA87EE245373978E0D2D334DBDE866C9B8B039036B87C5EB2FD89BCB6BAB = 000000000000000000000000000000007E597AA16257379C023A3AF0932707B9
Memory slot 0000000000000000000000000000000000000000000000000000000000000000 = 000000008C16FAF3B3C646EA52452052303054217DD775D33AFD120B00000020
Memory slot 467A5C61216CAD3003BC3395C339807C735D5C3D989CA4BC0EF2A37E14CE2679 = 00000000000000000000000000000000D115D0E17CF662EE7085B17527BD3B0F
Memory slot AF2AFAF35AD6DA1368C28C91BA52A84B6FC26E5AA0D9B26DC4FA0373E4D12C30 = 00000000000000000000000000000000B5BBBFBE1318AA0B579F2C78D85106FC
Memory slot 31FF9DA46623DED696608610C3749320B1CB2C2DFD644B1139DA5367A8E616CF = 00000000000000000000000000000000E7226949A60F0FF65EAAC636CACE080E
Memory slot 4E788733FE0BFF9AF5F3E3A353367490C603293E53707FE7E4E0071B9ED497D6 = 0000000000000000000000000000000097B9A700146F29ED406F8FABFDF3E771
Memory slot 80F14989282B60FA53CDD4F20DDDF40419D0398091709CCEEF4EA6608CB53A86 = 000000000000000000000000000000004C07B76FEE3D84E00878EEA7F394B0DA
Memory slot CC69885FDA6BCC1A4ACE058B4A62BF5E179EA78FD58A1CCD71C22CC9B688792F = 00000000000000000000000000000000883B6F6D835F4C8BD10D7725E99ABE33
Memory slot C8D233A0EBEF7C9A17D2B0B17EEA62CCA39002A128CCF419119B4A1A1F1E7428 = 0000000000000000000000000000000077C09AFD0431D6E872A142E2A36B2645
Memory slot BDBFD5FE12B0725F9A86EFFBF0320821EB71455F8B2A1271FAE01B3621E6F172 = 000000000000000000000000000000008C1E47698162712A5BB07A4D801764DC
Memory slot EDC95719E9A3B28DD8E80877CB5880A9BE7DE1A13FC8B05E7999683B6B567643 = 00000000000000000000000000000000834DE8DA0B1035284FAF89D55728BB86
Memory slot 41CB80F82BADDDD72E38FDA86A7CBBA38FAFD9735EF98C7795ABBBAF2B149562 = 00000000000000000000000000000000DBEDD4C5F053E9423E4F81D237A78E22
Memory slot 7DFE757ECD65CBD7922A9C0161E935DD7FDBCC0E999689C7D31633896B1FC60B = 00000000000000000000000000000000621CC30B60B393137508C237D271578D
Memory slot D6E773D900EC812417038DA9BAF6D960FCC201DD4BFA0D6323C29C7F6D7D874A = 000000000000000000000000000000005E8EBF207F0E53D6AA219CC5510152BE
Memory slot 2480FE25EE21F0B2BC289CCFF6DF415947190B288094AB9F0CBD50F7B814FD5E = 000000000000000000000000000000008D07B307B9302C12CFF799555DD8C68F
Memory slot 8F331ABE73332F95A25873E8B430885974C0409691F89D643119A11623A7924A = 0000000000000000000000000000000010E2A1E9FE68A121BDBD024E9273D664
Memory slot 57AAAFA65C4E563D39FFF90096A5FA76D42117F53D87EF870784E64D63A8A16B = 00000000000000000000000000000000E0D7D0A81D6B9AD59D65AD5C42361A5A
Memory slot D9D16D34FFB15BA3A3D852F0D403E2CE1D691FB54DE27AC87CD2F993F3EC330F = 000000000000000000000000000000003C9CA1F86596E2D975DF69195F532BE2
Memory slot E2689CD4A84E23AD2F564004F1C9013E9589D260BDE6380ABA3CA7E09E4DF40C = 00000000000000000000000000000000A2B51BBB00E7BF964AE8706AFF2A5AC2
Memory slot 23BF72DF16F8335BE9A3EDDFB5EF1C739B12847D13A384EC83F578699D38EB89 = 0000000000000000000000000000000061359F18239DFA7705D06755720A2814
Memory slot 40165E7164257B249280BF839A50283D248062ED7B0E6D8820CB6C506BFCF7D3 = 00000000000000000000000000000000F1E144B6C407D6AF71A2104EAB4D07DF
Memory slot FC80CD5FE514767BC6E66EC558E68A5429EA70B50FA6CAA3B53FC9278E918632 = 000000000000000000000000000000004B35A5F90A901974560F2C2788054DE8
Memory slot 12BD632FF333B55931F9F8BDA8B4ED27E86687F88C95871969D72474FB428C14 = 00000000000000000000000000000000352E02E532F3BE153526B0FB307C24A9
Memory slot 4DB623E5C4870B62D3FC9B4E8F893A1A77627D75AB45D9FF7E56BA19564AF99B = 000000000000000000000000000000002199761ECBFCF9546CCFD4D0D8CB6F82
Memory slot DC686EC4A0FF239C70E7C7C36E8F853ECED3BC8618F48D2B816DA2A74311237E = 000000000000000000000000000000002017F083882B2BE8747218B5D6F32EC2
Memory slot DDD2ED02835F51D041D738F145BF914E284838547C9BCC952EA4F9DE82C9F093 = 000000000000000000000000000000008593749AE9CAA6F4D18365C4D68B9D0C
Memory slot 2A32391A76C35A36352B711F9152C0D0A340CD686850C8EF25FBB11C71B89E7B = 00000000000000000000000000000000F278B00C3E11C458C43AE6CBCE36D007
Memory slot 2B00120B81607971383F6F5676C1551D6BB27BE3F263689FD3630E1A5BE14018 = 000000000000000000000000000000004E3E84028F44421FA9019E2A9D8F97FC
Done.

"""


#fill final contract memory here
storage["0x755311B9E2CEE471A91B161CCC5DEED933D844B5AF2B885543CC3C04EB640983"] = 0x000000000000000000000000000000009189E739289CEA74276B13D26DBE09B4
storage["0x68FB8E7CAD479CCC9244A179D64897454189FD25DB04E15D3A5135327A17597B"] = 0x0000000000000000000000000000000098F6D5A0E9039AF0B549FBED480C324C
storage["0xA6EEF7E35ABE7026729641147F7915573C7E97B47EFA546F5F6E3230263BCB49"] = 0x00000000000000000000000000000000BD77247EFD5026120EC466DC0BF48F78
storage["0x02D9F8353BCA53BC9B195AA186AB6D98B49A9120C00257EE2C7D860C26F864EA"] = 0x0000000000000000000000000000000050B94C75C93671A2CE180634059D9800
storage["0x74A5FBCB419AB7DBACBB2C92A4E163730F0DA5C72B911DEECF4F05A6B327D0A4"] = 0x00000000000000000000000000000000BFF717B395416071B54CD1E19274B4D8
storage["0x86B3FA87EE245373978E0D2D334DBDE866C9B8B039036B87C5EB2FD89BCB6BAB"] = 0x00000000000000000000000000000000D6F457E826D92CD3B122417D728927B3
storage["0x0000000000000000000000000000000000000000000000000000000000000000"] = 0x0000000099EB8BB96FF8580A5245205230305421B42CC50912EA778600000020
storage["0x467A5C61216CAD3003BC3395C339807C735D5C3D989CA4BC0EF2A37E14CE2679"] = 0x0000000000000000000000000000000045884FAA578E3CA131CBEF423EA3F68C
storage["0xAF2AFAF35AD6DA1368C28C91BA52A84B6FC26E5AA0D9B26DC4FA0373E4D12C30"] = 0x0000000000000000000000000000000039426851D22DDF6C6D3DD9627DE11F8C
storage["0x31FF9DA46623DED696608610C3749320B1CB2C2DFD644B1139DA5367A8E616CF"] = 0x000000000000000000000000000000005790098E78097C66F47F1833A8329758
storage["0x4E788733FE0BFF9AF5F3E3A353367490C603293E53707FE7E4E0071B9ED497D6"] = 0x00000000000000000000000000000000BB8476D9103C116AF663106A9E2DB2F4
storage["0x80F14989282B60FA53CDD4F20DDDF40419D0398091709CCEEF4EA6608CB53A86"] = 0x00000000000000000000000000000000348912D16CDFF19B53632544E24155CC
storage["0xCC69885FDA6BCC1A4ACE058B4A62BF5E179EA78FD58A1CCD71C22CC9B688792F"] = 0x0000000000000000000000000000000042D91B8FD115E27863C53462655BCA4B
storage["0xC8D233A0EBEF7C9A17D2B0B17EEA62CCA39002A128CCF419119B4A1A1F1E7428"] = 0x000000000000000000000000000000005BDDAAE22D5F3DA9B536582CB9A17298
storage["0xBDBFD5FE12B0725F9A86EFFBF0320821EB71455F8B2A1271FAE01B3621E6F172"] = 0x000000000000000000000000000000003BD1AF68A64ADFA69329E9995FFE9C37
storage["0xEDC95719E9A3B28DD8E80877CB5880A9BE7DE1A13FC8B05E7999683B6B567643"] = 0x000000000000000000000000000000009A58B3845230BCCDA2D68691B0F85CD3
storage["0x41CB80F82BADDDD72E38FDA86A7CBBA38FAFD9735EF98C7795ABBBAF2B149562"] = 0x00000000000000000000000000000000D7D98A01C0DFE62BB863FD73F98EBE62
storage["0x7DFE757ECD65CBD7922A9C0161E935DD7FDBCC0E999689C7D31633896B1FC60B"] = 0x000000000000000000000000000000009B0656AF78A7CCC5FA58ECE282AFB5BC
storage["0xD6E773D900EC812417038DA9BAF6D960FCC201DD4BFA0D6323C29C7F6D7D874A"] = 0x0000000000000000000000000000000038095B8DCA7F3080760F2E79D4DEAD87
storage["0x2480FE25EE21F0B2BC289CCFF6DF415947190B288094AB9F0CBD50F7B814FD5E"] = 0x00000000000000000000000000000000C1E6D58E626E0B544310B623021C4E9F
storage["0x8F331ABE73332F95A25873E8B430885974C0409691F89D643119A11623A7924A"] = 0x0000000000000000000000000000000010D4DBA09B5D1C148B11EFF397A19205
storage["0x57AAAFA65C4E563D39FFF90096A5FA76D42117F53D87EF870784E64D63A8A16B"] = 0x0000000000000000000000000000000075863546676FC6615A15F2C6C09F4933
storage["0xD9D16D34FFB15BA3A3D852F0D403E2CE1D691FB54DE27AC87CD2F993F3EC330F"] = 0x000000000000000000000000000000002D4B53BD572BC0E509147E49720F2DBB
storage["0xE2689CD4A84E23AD2F564004F1C9013E9589D260BDE6380ABA3CA7E09E4DF40C"] = 0x000000000000000000000000000000007AACC07CC54BE008851A06A6882974D4
storage["0x23BF72DF16F8335BE9A3EDDFB5EF1C739B12847D13A384EC83F578699D38EB89"] = 0x0000000000000000000000000000000090650EDF445FD692FAEC1AE30936F9C4
storage["0x40165E7164257B249280BF839A50283D248062ED7B0E6D8820CB6C506BFCF7D3"] = 0x00000000000000000000000000000000BCE46085EA23920E095E54F51316397F
storage["0xFC80CD5FE514767BC6E66EC558E68A5429EA70B50FA6CAA3B53FC9278E918632"] = 0x00000000000000000000000000000000858E2D7034EA8DBDA7097DDF36428E2A
storage["0x12BD632FF333B55931F9F8BDA8B4ED27E86687F88C95871969D72474FB428C14"] = 0x00000000000000000000000000000000AC530B4036B0AFCD3E21EA92B858F6A9
storage["0x4DB623E5C4870B62D3FC9B4E8F893A1A77627D75AB45D9FF7E56BA19564AF99B"] = 0x00000000000000000000000000000000EB0BA52C2D94D5E994A0FD02953CA525
storage["0xDC686EC4A0FF239C70E7C7C36E8F853ECED3BC8618F48D2B816DA2A74311237E"] = 0x000000000000000000000000000000003D66028DE2A301537EB6A37E0A7D9578
storage["0xDDD2ED02835F51D041D738F145BF914E284838547C9BCC952EA4F9DE82C9F093"] = 0x000000000000000000000000000000000DF3FD6B4949300E52D624E02E1DCEB0
storage["0x2A32391A76C35A36352B711F9152C0D0A340CD686850C8EF25FBB11C71B89E7B"] = 0x0000000000000000000000000000000009BD86249E977C79655D20569DCD3571
storage["0x2B00120B81607971383F6F5676C1551D6BB27BE3F263689FD3630E1A5BE14018"] = 0x000000000000000000000000000000008B656CF9792301C29A786BAD639C3919


print("")
#OK until here

####


#raise Exception
####


def get_random():
    global storage
    set_storage_0x00(0, 256, (get_storage_0x00(0, 256) & not256(MASK64 * 0x100 ** 0x0C) ))
    set_storage_0x00(0,256, (get_storage_0x00(20*8,64+32)))
    random = xor256(get_storage_0x00(0,256), 0x4d30442053515541 * 0x100**0x4) >> 32
    return random


def change_endianess(val):
    assert val < (1<<64)
    tmp = val
    s = 0
    for i in range(8):
        s = s + ((tmp&0xff) << ((7-i)*8))
        tmp = tmp >> 8
    assert tmp == 0
    return s

#XOR mapping 0x80
def generate_binary_0x80():
    mapping = []
    for i in range(0x20):
        bin_str = bin(i)[2:]
        bin_str = "0"*(8-len(bin_str)) + bin_str
        bin_str = bin_str[::-1]

        s = 0
        for bit in bin_str:
            s = s<<8
            if bit == "1":
                s += 0x80

        mapping.append(s)
    return mapping

def message_xor_0x80(msg):
    mapping_0x80 = generate_binary_0x80()
    xored_message = []
    for i,j in zip(msg, mapping_0x80):
        xored_message.append(i^j)
    return xored_message


#first phase

def randomizing1(initial_random, val):

    v7 = val
    v8 = 0x7FFFFFFD // v7
    random = initial_random
    v10 = 0x7FFFFFFD // v7 * v7

    v11 = 0x41A7 * random
    v12 = v11
    v13 = (0x200000005 * v11) >> 64
    v14 = v11 - 0x7FFFFFFF * ( (( (v12-v13)>> 1)+ v13) >> 30)
    random = v14
    while (v10 <= (v14-1)):
        v11 = 0x41A7 * random
        v12 = v11
        v13 = (0x200000005 * v11) >> 64
        v14 = v11 - 0x7FFFFFFF * ( (( (v12-v13)>> 1)+ v13) >> 30)
        random = v14
    
    v15 = (v14-1) // v8
    
    return v15, random

def permute_buffer(xored_message, initial_random):

    debug_c = 0
    permuted_buf = xored_message[:]
    random = (initial_random ) % 0x7FFFFFFF
    #print("RANDOM: %08x" % random)
    for i in range(0x1f, -1, -1):
        idx, random = randomizing1(random, i+1)
        x = permuted_buf[idx]
        y = permuted_buf[i]

        permuted_buf[i] = x
        permuted_buf[idx] = y

    return permuted_buf

def find_permutation(buffer, permuted_buffer):
    permutation = []
    for b in buffer:
        permutation.append(permuted_buffer.index(b))
    return permutation

def find_permutation_inv(permuted_buffer, buffer):
    permutation = []
    for b in permuted_buffer:
        permutation.append(buffer.index(b))
    return permutation


#Inverting

#reversing data from memory. Need to bruteforce the last byte after that
for i in range(32):
    rev_func_0105()

for m in message:
    print("randomized %016x" % m)

retrieved_random = get_random()
print("")
print("Retrieved random %08x" % retrieved_random)
print("")



#set random from retrieved_random : change endianness, and get the 4 lower bytes
RANDOM = retrieved_random & 0xFFFFFFFF

#FINDING permutation_inv
text = [0x6161616161616161, 0x6262626262626262, 0x6363636363636363, 0x6464646464646464] + [0]*(32-4)

xored_text = message_xor_0x80(text)
permuted_text_xored = permute_buffer(xored_text, RANDOM)
permutation_inv = find_permutation_inv(permuted_text_xored, xored_text)


def randomizing2(initial_random):
    #random is 4-byte long
    random = initial_random
    v10 = 0x7FFFFF00
    v11 = 0x41A7 * random
    v12 = v11
    v13 = (0x200000005 * v11) >> 64
    v14 = v11 - 0x7FFFFFFF * ( (( (v12-v13)>> 1)+ v13) >> 30)
    random = v14
    while (v10 <= (v14-1)):
        v11 = 0x41A7 * random
        v12 = v11
        v13 = (0x200000005 * v11) >> 64
        v14 = v11 - 0x7FFFFFFF * ( (( (v12-v13)>> 1)+ v13) >> 30)
        random = v14
    
    v15 = (v14-1) // 0x7FFFFF
    
    return v15, random

def xoring_permuted_message_xored(initial_random_value, permuted_message_xored):
    debug_c = 0

    msg = []
    random = initial_random_value +1
    for m in permuted_message_xored:
        v13 = 0
        for i in range(8):
            v15, random = randomizing2(random)
            v13 = (v13 << 8) ^ v15

        msg.append(xor64(m, change_endianess(v13)))
    return msg


#invert permutation
def invert_permutation(permutation_inv_table, buffer):
    buffer_inverted = [0]*len(buffer)

    for i in range(0x20):
        buffer_inverted[permutation_inv_table[i]] = buffer[i]
    
    return buffer_inverted


########################################################

import binascii

#CRACKING
#from retrieved_message:
#testing
final_message = [[]]*0x20
debug = 0

#message_ref = message[:]
message_ref = message[:]

for byte_random in range(256):
    #print("%d/256" % (byte_random+1))

    #print("testing %02x" % byte_random)
    message_bis = []
    message = message_ref[:]
    for m in message:

        val_8bytes = m
        val_1byte = byte_random
        for i in range(7,-1,-1):
            tmp = ror_1byte(val_1byte)
            val_8bytes = xor256(val_8bytes, tmp << (i*0x08 & 0xff))
            val_1byte = tmp

        val_1byte_candidate = val_1byte
        val_8bytes_candidate = val_8bytes

        message_bis.append(val_8bytes_candidate)

    message = message_bis[:]


    #change endianess of messages
    almost_ready_message = []
    for m in message:
        almost_ready_message.append(change_endianess(m))

    permuted_message_xored = xoring_permuted_message_xored(RANDOM, almost_ready_message)

    message_xored = invert_permutation(permutation_inv, permuted_message_xored)

    #xoring with 0x80
    message_initial = message_xor_0x80(message_xored)
    
    for idx, m in enumerate(message_initial):
        s = bytes.fromhex("%016x" % m)
        final_message[idx] = final_message[idx] + [s]
        """
        try:
            s = s.decode("utf-8")
            final_message[idx].append(s)
            print("found %s" % s)
        except:
            pass
        """
        """
        valid = True
        for c in s:
            if not (c == 0 or (c>=0x20 and c <= 0x7E)):
                valid = False
                break
        if valid:
            s2 = []
            for c in s:
                if c != 0:
                    s2.append(c)
                else:
                    s2.append(0x20)
            s2 = bytes(s2)
            final_message[idx].append(s2.decode("utf8"))
            print("found %s" % s2.decode("utf8"))
            break
        """

        """
        try:
            final_message[idx].append(s.decode("utf8"))
            print("found %s" % s.decode("utf8"))

            if idx == 0:
                debug += 1
        except:
            pass
        """
#print(final_message)


print(len(final_message))
#print(final_message)
s = ""
for m in final_message:
    for candidate in m:
        #print(m)
        try:
            print(candidate.decode("utf8"))
            s+=candidate.decode("utf8")
            break
        except:
            pass

print(s)
